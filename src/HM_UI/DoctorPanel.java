/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package HM_UI;

import HM_Model.Doctor;
import HM_Model.DoctorDirectory;
import HM_Model.Encounter;
import HM_Model.EncounterDetails;
import HM_Model.Patient;
import HM_Model.PatientHistory;
import HM_Model.VitalSigns;
import HM_Model.VitalSignsDirectory;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author adity
 */
public class DoctorPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorPanel
     */
    DoctorDirectory doctorDirectory;
    PatientHistory patientHistory;
    EncounterDetails encounterDetails;
    Doctor d;
    Patient p;
    VitalSignsDirectory vitalSignsDirectory;
    
    public DoctorPanel(DoctorDirectory doctorDirectory, PatientHistory patientHistory, Doctor d, EncounterDetails encounterDetails, VitalSignsDirectory vitalSignsDirectory) {
        initComponents();
        this.doctorDirectory=doctorDirectory;
        this.patientHistory=patientHistory;
        this.encounterDetails=encounterDetails;
        this.d=d;
        this.vitalSignsDirectory=vitalSignsDirectory;
        AssignedPatients();
        lblHeading1.setText("Welcome "+d.getName());

        
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeading1 = new javax.swing.JLabel();
        lblHeading4 = new javax.swing.JLabel();
        lblPulse1 = new javax.swing.JLabel();
        txtBP = new javax.swing.JTextField();
        lblBP1 = new javax.swing.JLabel();
        txtSugar = new javax.swing.JTextField();
        lblSugar1 = new javax.swing.JLabel();
        txtPulse = new javax.swing.JTextField();
        lblPatient = new javax.swing.JLabel();
        lblEncounter = new javax.swing.JLabel();
        cbPatient = new javax.swing.JComboBox<>();
        cbEncounter = new javax.swing.JComboBox<>();
        btnAddVitals = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaPatientProblem = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaDoctorSolution = new javax.swing.JTextArea();
        lblPatientProblem = new javax.swing.JLabel();
        lblDoctorSolution = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1410, 1130));
        setLayout(null);

        lblHeading1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblHeading1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading1.setText("Welcome to Doctor's View");
        add(lblHeading1);
        lblHeading1.setBounds(28, 33, 932, 58);

        lblHeading4.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblHeading4.setText("Patient's Vital Signs");
        add(lblHeading4);
        lblHeading4.setBounds(300, 390, 450, 56);

        lblPulse1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblPulse1.setText("Pulse :");
        add(lblPulse1);
        lblPulse1.setBounds(114, 472, 36, 15);

        txtBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBPActionPerformed(evt);
            }
        });
        add(txtBP);
        txtBP.setBounds(413, 469, 138, 22);

        lblBP1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblBP1.setText("BP :");
        add(lblBP1);
        lblBP1.setBounds(370, 470, 30, 16);
        add(txtSugar);
        txtSugar.setBounds(710, 469, 139, 22);

        lblSugar1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblSugar1.setText("Sugar Levels :");
        add(lblSugar1);
        lblSugar1.setBounds(624, 472, 80, 15);
        add(txtPulse);
        txtPulse.setBounds(153, 469, 126, 22);

        lblPatient.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblPatient.setText("Select Patient");
        add(lblPatient);
        lblPatient.setBounds(114, 119, 74, 15);

        lblEncounter.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblEncounter.setText("Select Encounter :");
        add(lblEncounter);
        lblEncounter.setBounds(400, 110, 97, 15);

        cbPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPatientActionPerformed(evt);
            }
        });
        add(cbPatient);
        cbPatient.setBounds(215, 116, 118, 22);

        cbEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEncounterActionPerformed(evt);
            }
        });
        add(cbEncounter);
        cbEncounter.setBounds(520, 110, 116, 22);

        btnAddVitals.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAddVitals.setText("Add Vitals");
        btnAddVitals.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(0, 0, 0), null));
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });
        add(btnAddVitals);
        btnAddVitals.setBounds(425, 666, 100, 30);

        txtAreaPatientProblem.setColumns(20);
        txtAreaPatientProblem.setRows(5);
        jScrollPane1.setViewportView(txtAreaPatientProblem);

        add(jScrollPane1);
        jScrollPane1.setBounds(459, 179, 234, 86);

        txtAreaDoctorSolution.setColumns(20);
        txtAreaDoctorSolution.setRows(5);
        jScrollPane2.setViewportView(txtAreaDoctorSolution);

        add(jScrollPane2);
        jScrollPane2.setBounds(368, 533, 234, 86);

        lblPatientProblem.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblPatientProblem.setText("Patient Problem :");
        add(lblPatientProblem);
        lblPatientProblem.setBounds(351, 179, 92, 15);

        lblDoctorSolution.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblDoctorSolution.setText("Doctor Solution :");
        add(lblDoctorSolution);
        lblDoctorSolution.setBounds(234, 533, 100, 15);

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\adity\\Downloads\\doctor-netherlands-1920x1080_1410x1130.jpg")); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1410, 1130));
        jLabel1.setPreferredSize(new java.awt.Dimension(1410, 1130));
        add(jLabel1);
        jLabel1.setBounds(0, 0, 1290, 980);
    }// </editor-fold>//GEN-END:initComponents

    private boolean checkfield(){
        ArrayList msg = null;
        msg = new ArrayList();
        
        String[] a = new String[2]; 
        try{
        a = txtBP.getText().split("/",2);
        //System.out.print(a[0]+""+a[1]);
       }
        catch(Exception e){JOptionPane.showMessageDialog(this, "Please enter BP in (XXX/XXX) format..!!");}
        
        if(Integer.parseInt(a[0])<50 || Integer.parseInt(a[0])>250 || Integer.parseInt(a[1])<50 || Integer.parseInt(a[1])>200)
            msg.add("Please enter BP in (50-220/>50-200) format");
        if(Float.parseFloat(txtPulse.getText())<30 || Float.parseFloat(txtPulse.getText())>230)
            msg.add("Please Enter Correct Pulse values between 30 and 230");
        if(Float.parseFloat(txtSugar.getText())<40 || Float.parseFloat(txtSugar.getText())>300)
            msg.add("Please Enter Correct Sugar Values between 40 to 300");
        
        if(!(msg.isEmpty()))
        {JOptionPane.showMessageDialog(this, msg.toArray());
        msg.clear();
        return false;}
        else 
        return true;
    }
    
    private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
        VitalSigns vs=vitalSignsDirectory.addNewVitals();
        try{
        if(checkfield()){
        vs.setBp(txtBP.getText());
        vs.setPulse(Float.parseFloat(txtPulse.getText()));
        vs.setSugar(Float.parseFloat(txtSugar.getText()));
        vs.setP(p);
        vs.setEncDate(String.valueOf(cbEncounter.getSelectedItem()));
        vs.setDoctorSolution(txtAreaDoctorSolution.getText());
        
        JOptionPane.showMessageDialog(this,"Vital Signs Added.. Take Care!!");
        }
        }
        catch(Exception e){JOptionPane.showMessageDialog(this, "Please enter the correct Vital Signs..!!");}
    }//GEN-LAST:event_btnAddVitalsActionPerformed

    private void cbPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPatientActionPerformed
        // TODO add your handling code here:
       p=patientHistory.getPatientByName(String.valueOf(cbPatient.getSelectedItem()));
       setEncounterDate(p,d);
           
       
        
    }//GEN-LAST:event_cbPatientActionPerformed
    
    private void txtBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBPActionPerformed

    private void cbEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEncounterActionPerformed
        String ps = String.valueOf(cbEncounter.getSelectedItem());
        Encounter e = encounterDetails.getEncounterByDate(ps);
        txtAreaPatientProblem.setText(e.getPatientProblem());
        txtAreaPatientProblem.setEditable(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEncounterActionPerformed
     
    private void AssignedPatients(){
             ArrayList<String> list = new ArrayList<>();
             for(Encounter e: encounterDetails.getEncounterDetails()){
                 if(!list.contains(e.getP().getName()))
                     list.add(e.getP().getName());
             }
             for(String s:list)
                 cbPatient.addItem(s);
         
     }
     
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JComboBox<String> cbEncounter;
    private javax.swing.JComboBox<String> cbPatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBP1;
    private javax.swing.JLabel lblDoctorSolution;
    private javax.swing.JLabel lblEncounter;
    private javax.swing.JLabel lblHeading1;
    private javax.swing.JLabel lblHeading4;
    private javax.swing.JLabel lblPatient;
    private javax.swing.JLabel lblPatientProblem;
    private javax.swing.JLabel lblPulse1;
    private javax.swing.JLabel lblSugar1;
    private javax.swing.JTextArea txtAreaDoctorSolution;
    private javax.swing.JTextArea txtAreaPatientProblem;
    private javax.swing.JTextField txtBP;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtSugar;
    // End of variables declaration//GEN-END:variables

    private void setEncounterDate(Patient p, Doctor d){
        cbEncounter.removeAllItems();
        for(Encounter e:encounterDetails.getEncounterDetails())
        {
            if(e.getP()==p && e.getD()==d)
                cbEncounter.addItem(e.getEncDate());
        }
    }
}
